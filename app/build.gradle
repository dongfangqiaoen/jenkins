apply plugin: 'com.android.application'


def gitBranch = getGitBranch()


println "===============Environment==============="
println("version     : ${VERSION}")

def so_version = "${VERSION}"
println "===============Environment===============\n"



android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.sun.jenkins"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
}

/**
 * Jenkins中打包
 * Jenkins中配置 IS_SNAPSHOT BUILD_SO_VERSION属性
 * 打包时将属性同步到gradle.properties中
 */
task buildInJenkins(dependsOn: "assembleRelease") {
    doLast {
        def resourceFile = "gradle.properties"
        def readProps = new Properties()
        new File(resourceFile).withInputStream {
            stream -> readProps.load(stream)
        }
        println "VERSION " + readProps["VERSION"]

        def writeProps = new Properties()
        FileInputStream fis = new FileInputStream(resourceFile)
        writeProps.load(fis)
        fis.close()

        println "write data to gradle.properties ? ${so_version} : ${so_version}"

        writeProps.setProperty("VERSION", "${so_version}")
        FileOutputStream fos = new FileOutputStream(resourceFile)
        writeProps.store(fos, "auto create by gradle")
        fos.close()
    }
}



task autoCommitProperties(type: Exec) {
    commandLine 'git', 'status'
}

task autoGitAdd(type: Exec) {
    dependsOn autoCommitProperties
    def prop = "../gradle.properties"
    println "git add $prop"
    commandLine 'git','config','user.name',"dongfangqiaoen"
    commandLine 'git','config','user.email',"dongfangqiaoen@gmail.com"
    commandLine 'git', 'add', prop
}

task autoGitCommit(type: Exec) {
    dependsOn autoGitAdd
    commandLine 'git', 'commit', '-m', "auto by gradle，version = $so_version"
}

task autoGitPush(type: Exec) {
    dependsOn autoGitCommit
    commandLine 'git', 'push', 'origin', "$gitBranch"
}

task getBranch(){
    def branch = getGitBranch();
    println "branch: $branch"
}


def getGitBranch() {
    //判断是否处于Jenkins编译环境
    boolean flag = isInJenkins()
    if (flag) {
        ext.env = System.getenv()
        ext.gitBranch = env.GIT_BRANCH
        String[] stringArray = ext.gitBranch.split("/")
        if (stringArray.length > 0) {
            return stringArray[stringArray.length - 1]
        } else {
            return "UnKnown Branch"
        }
    } else {
        return 'git symbolic-ref --short -q HEAD'.execute().text.trim()
    }
}



/**
 * 判断是否有jenkins
 */
boolean isInJenkins() {
    Map<String, String> map = System.getenv()
    if (map == null) {
        return false
    }
    String str = map.get("Path")
    if (str != null) {
        //it's windows
        return false
    } else {
        str = ""
        Iterator it = map.iterator()
        while (it.hasNext()) {
            str += it.next()
        }
        return str.contains("jenkins")
    }
}


